---
import "@fontsource/roboto/400.css";
import "@fontsource/roboto/500.css";
import "@fontsource/roboto/700.css";

import { profileConfig, siteConfig } from "@/config";
import ConfigCarrier from "@components/ConfigCarrier.astro";

import {
	AUTO_MODE,
	BANNER_HEIGHT,
	BANNER_HEIGHT_EXTEND,
	BANNER_HEIGHT_HOME,
	DARK_MODE,
	DEFAULT_THEME,
	LIGHT_MODE,
	PAGE_WIDTH,
} from "../constants/constants";
import { defaultFavicons } from "../constants/icon";
import type { Favicon } from "../types/config";
import { url, pathsEqual } from "../utils/url-utils";
import "katex/dist/katex.css";

interface Props {
	title?: string;
	banner?: string;
	description?: string;
	lang?: string;
	setOGTypeArticle?: boolean;
}

let { title, banner, description, lang, setOGTypeArticle } = Astro.props;

// apply a class to the body element to decide the height of the banner, only used for initial page load
// Swup can update the body for each page visit, but it's after the page transition, causing a delay for banner height change
// so use Swup hooks instead to change the height immediately when a link is clicked
const isHomePage = pathsEqual(Astro.url.pathname, url("/"));

// defines global css variables
// why doing this in Layout instead of GlobalStyles: https://github.com/withastro/astro/issues/6728#issuecomment-1502203757
const configHue = siteConfig.themeColor.hue;
if (!banner || typeof banner !== "string" || banner.trim() === "") {
	banner = siteConfig.banner.src;
}

// TODO don't use post cover as banner for now
banner = siteConfig.banner.src;

const enableBanner = siteConfig.banner.enable;

let pageTitle: string;
if (title) {
	pageTitle = `${title} - ${siteConfig.title}`;
} else {
	pageTitle = `${siteConfig.title} - ${siteConfig.subtitle}`;
}

const favicons: Favicon[] =
	siteConfig.favicon.length > 0 ? siteConfig.favicon : defaultFavicons;

// const siteLang = siteConfig.lang.replace('_', '-')
if (!lang) {
	lang = `${siteConfig.lang}`;
}
const siteLang = lang.replace("_", "-");

const bannerOffsetByPosition = {
	top: `${BANNER_HEIGHT_EXTEND}vh`,
	center: `${BANNER_HEIGHT_EXTEND / 2}vh`,
	bottom: "0",
};
const bannerOffset =
	bannerOffsetByPosition[siteConfig.banner.position || "center"];
---

<!DOCTYPE html>
<html lang={siteLang} class="bg-[var(--page-bg)] transition text-[14px] md:text-[16px]"
	  data-overlayscrollbars-initialize
>
	<head>

		<title>{pageTitle}</title>

		<meta charset="UTF-8" />
		<meta name="description" content={description || pageTitle}>
		<meta name="author" content={profileConfig.name}>

		<meta property="og:site_name" content={siteConfig.title}>
		<meta property="og:url" content={Astro.url}>
		<meta property="og:title" content={pageTitle}>
		<meta property="og:description" content={description || pageTitle}>
		{setOGTypeArticle ? (
        <meta property="og:type" content="article" />
        ) : (
        <meta property="og:type" content="website" />
        )}

		<meta name="twitter:card" content="summary_large_image">
		<meta property="twitter:url" content={Astro.url}>
		<meta name="twitter:title" content={pageTitle}>
		<meta name="twitter:description" content={description || pageTitle}>

		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		{favicons.map(favicon => (
			<link rel="icon"
				  href={favicon.src.startsWith('/') ? url(favicon.src) : favicon.src}
				  sizes={favicon.sizes}
				  media={favicon.theme && `(prefers-color-scheme: ${favicon.theme})`}
			/>
		))}

		<!-- Set the theme before the page is rendered to avoid a flash -->
		<script is:inline define:vars={{DEFAULT_THEME, LIGHT_MODE, DARK_MODE, AUTO_MODE, BANNER_HEIGHT_EXTEND, PAGE_WIDTH, configHue}}>
			// Load the theme from local storage
			const theme = localStorage.getItem('theme') || DEFAULT_THEME;
			switch (theme) {
				case LIGHT_MODE:
					document.documentElement.classList.remove('dark');
					break
				case DARK_MODE:
					document.documentElement.classList.add('dark');
					break
				case AUTO_MODE:
					if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
						document.documentElement.classList.add('dark');
					} else {
						document.documentElement.classList.remove('dark');
					}
			}

			// Load the hue from local storage
			const hue = localStorage.getItem('hue') || configHue;
			document.documentElement.style.setProperty('--hue', hue);

			// calculate the --banner-height-extend, which needs to be a multiple of 4 to avoid blurry text
			let offset = Math.floor(window.innerHeight * (BANNER_HEIGHT_EXTEND / 100));
			offset = offset - offset % 4;
			document.documentElement.style.setProperty('--banner-height-extend', `${offset}px`);
		</script>
		<style define:vars={{
			configHue,
			'page-width': `${PAGE_WIDTH}rem`,
		}}>
		/* Force white/light gray background instead of hue-dependent */
		:root {
			--page-bg: #fafafa !important;
		}
		:root.dark {
			--page-bg: #1a1a1a !important;
		}
		</style>  <!-- defines global css variables. This will be applied to <html> <body> and some other elements idk why -->


		<slot name="head"></slot>

		<link rel="alternate" type="application/rss+xml" title={profileConfig.name} href={`${Astro.site}rss.xml`}/>

	</head>
	<body class=" min-h-screen transition " class:list={[{"lg:is-home": isHomePage, "enable-banner": enableBanner}]}
		  data-overlayscrollbars-initialize
	>
		<ConfigCarrier></ConfigCarrier>
		<slot />

		<!-- increase the page height during page transition to prevent the scrolling animation from jumping -->
		<div id="page-height-extend" class="hidden h-[300vh]"></div>
		<!-- D3.js for Better Diagrams (No More Mermaid Issues!) -->
		<script src="https://d3js.org/d3.v7.min.js" is:inline></script>
		<!-- KaTeX for math formulas -->
		<script is:inline src="https://unpkg.com/katex@0.16.9/dist/katex.min.js"></script>
		<script is:inline src="https://unpkg.com/katex@0.16.9/dist/contrib/auto-render.min.js"></script>
		<link rel="stylesheet" href="https://unpkg.com/katex@0.16.9/dist/katex.min.css">
		
		<script is:inline>
			// 🎯 GIẢI PHÁP MỚI: D3.js Diagrams (No More Mermaid Issues!)
			
			function initD3Diagrams() {
				if (typeof d3 === 'undefined') {
					setTimeout(initD3Diagrams, 100);
					return;
				}
				
				processD3Diagrams();
			}
			
			function processD3Diagrams() {
				
				// Find all code blocks that were previously problematic Mermaid
				const allCodeBlocks = document.querySelectorAll('figure code, pre code, code');
				let diagramCount = 0;
				
				allCodeBlocks.forEach((codeElement) => {
					let codeText = codeElement.textContent.trim();
					
					// Simple cleanup - no more complex regex hell!
					codeText = codeText
						.split('\n')
						.map(line => line.replace(/^\s*\d+\s*/, '').trim())
						.filter(line => line.length > 0)
						.join('\n')
						.trim();
					
					// Check if this should be a diagram
					if (isDiagramCode(codeText)) {
						
						// Create beautiful D3 diagram container
						const diagramDiv = document.createElement('div');
						diagramDiv.className = 'd3-diagram';
						diagramDiv.style.cssText = 'text-align: center; margin: 1.5rem 0; min-height: 200px; border: 2px solid #e2e8f0; border-radius: 12px; padding: 20px; background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);';
						
						// Generate appropriate diagram based on content
						if (codeText.includes('graph') || codeText.includes('flowchart')) {
							createFlowchartD3(diagramDiv, codeText);
						} else if (codeText.includes('mindmap')) {
							createMindmapD3(diagramDiv, codeText);
						} else if (codeText.includes('gantt')) {
							createGanttD3(diagramDiv, codeText);
						} else {
							createGenericD3(diagramDiv, codeText);
						}
						
						// Replace the original problematic code block
						const container = codeElement.closest('figure') || codeElement.closest('pre') || codeElement;
						if (container && container.parentNode) {
							container.parentNode.replaceChild(diagramDiv, container);
						}
						diagramCount++;
					}
				});
				
				// Diagrams created successfully
				
				initKaTeX(); // Initialize KaTeX after diagrams
			}
			
			function isDiagramCode(text) {
				// More strict detection to avoid false positives
				
				// First, exclude obvious Python/SQL/programming code
				const programmingIndicators = [
					'def ', 'import ', 'from ', 'print(', 'return ', 'if __name__',
					'SELECT ', 'FROM ', 'WHERE ', 'INSERT ', 'UPDATE ', 'DELETE ',
					'= [', '] # ', '# Variable', '# Iterating', '# Non-Pythonic',
					'age = ', 'name = ', 'score = ', 'count = ', 'for i in',
					'range(', 'len(', 'str(', 'int(', 'float('
				];
				
				// If it looks like programming code, reject it
				if (programmingIndicators.some(indicator => text.includes(indicator))) {
					return false;
				}
				
				// Must start with actual Mermaid diagram keywords
				const validMermaidStarts = [
					'graph ', 'flowchart ', 'mindmap', 'gantt', 'pie ',
					'sequenceDiagram', 'classDiagram', 'stateDiagram'
				];
				
				// Check if it starts with valid Mermaid syntax
				const startsWithMermaid = validMermaidStarts.some(start => 
					text.trim().toLowerCase().startsWith(start.toLowerCase())
				);
				
				// Also check for specific Mermaid syntax patterns
				const hasValidMermaidSyntax = /^(graph|flowchart|mindmap|gantt)\s+(TD|TB|LR|RL|\w+)/i.test(text.trim());
				
				return startsWithMermaid || hasValidMermaidSyntax;
			}
			
			// 🎨 Beautiful D3.js Flowchart Creator
			function createFlowchartD3(container, code) {
				const svg = d3.select(container)
					.append('svg')
					.attr('width', 600)
					.attr('height', 400)
					.style('background', 'white')
					.style('border-radius', '8px')
					.style('box-shadow', '0 4px 6px rgba(0, 0, 0, 0.1)');
				
				// Create beautiful gradient
				const defs = svg.append('defs');
				const gradient = defs.append('linearGradient')
					.attr('id', 'nodeGradient')
					.attr('x1', '0%').attr('y1', '0%')
					.attr('x2', '100%').attr('y2', '100%');
				gradient.append('stop').attr('offset', '0%').style('stop-color', '#667eea');
				gradient.append('stop').attr('offset', '100%').style('stop-color', '#764ba2');
				
				// Parse nodes and links with better defaults
				const nodes = extractNodes(code);
				const links = extractLinks(code);
				
				// Create force simulation with smooth animation
				const simulation = d3.forceSimulation(nodes)
					.force('link', d3.forceLink(links).id(d => d.id).distance(150))
					.force('charge', d3.forceManyBody().strength(-400))
					.force('center', d3.forceCenter(300, 200))
					.force('collision', d3.forceCollide().radius(40));
				
				// Create arrow markers
				defs.append('marker')
					.attr('id', 'arrowhead')
					.attr('viewBox', '-0 -5 10 10')
					.attr('refX', 25)
					.attr('refY', 0)
					.attr('orient', 'auto')
					.attr('markerWidth', 13)
					.attr('markerHeight', 13)
					.append('path')
					.attr('d', 'M 0,-5 L 10 ,0 L 0,5')
					.attr('fill', '#667eea');
				
				// Create links with smooth curves
				const link = svg.append('g')
					.selectAll('path')
					.data(links)
					.enter().append('path')
					.attr('stroke', '#667eea')
					.attr('stroke-width', 3)
					.attr('fill', 'none')
					.attr('marker-end', 'url(#arrowhead)')
					.style('opacity', 0.8);
				
				// Create beautiful nodes
				const nodeGroup = svg.append('g')
					.selectAll('g')
					.data(nodes)
					.enter().append('g')
					.style('cursor', 'pointer')
					.call(d3.drag()
						.on('start', dragstarted)
						.on('drag', dragged)
						.on('end', dragended));
				
				// Node backgrounds
				nodeGroup.append('rect')
					.attr('width', d => Math.max(d.label.length * 9 + 30, 100))
					.attr('height', 50)
					.attr('x', d => -(Math.max(d.label.length * 9 + 30, 100)) / 2)
					.attr('y', -25)
					.attr('fill', 'url(#nodeGradient)')
					.attr('stroke', '#4a5568')
					.attr('stroke-width', 2)
					.attr('rx', 10)
					.style('filter', 'drop-shadow(2px 2px 4px rgba(0,0,0,0.2))');
				
				// Node text
				nodeGroup.append('text')
					.text(d => d.label)
					.attr('text-anchor', 'middle')
					.attr('dy', 5)
					.attr('fill', 'white')
					.style('font-size', '14px')
					.style('font-weight', 'bold')
					.style('text-shadow', '1px 1px 2px rgba(0,0,0,0.5)');
				
				// Animation
				simulation.on('tick', () => {
					link.attr('d', d => {
						const dx = d.target.x - d.source.x;
						const dy = d.target.y - d.source.y;
						const dr = Math.sqrt(dx * dx + dy * dy) * 0.3;
						return `M ${d.source.x}, ${d.source.y} A ${dr}, ${dr} 0 0,1 ${d.target.x}, ${d.target.y}`;
					});
					
					nodeGroup.attr('transform', d => `translate(${d.x}, ${d.y})`);
				});
				
				// Add title
				svg.append('text')
					.attr('x', 300)
					.attr('y', 30)
					.attr('text-anchor', 'middle')
					.style('font-size', '18px')
					.style('font-weight', 'bold')
					.attr('fill', '#2d3748')
					.text('📊 Interactive D3.js Flowchart');
				
				function dragstarted(event, d) {
					if (!event.active) simulation.alphaTarget(0.3).restart();
					d.fx = d.x;
					d.fy = d.y;
				}
				
				function dragged(event, d) {
					d.fx = event.x;
					d.fy = event.y;
				}
				
				function dragended(event, d) {
					if (!event.active) simulation.alphaTarget(0);
					d.fx = null;
					d.fy = null;
				}
			}
			
			// 🧠 Beautiful D3.js Mindmap Creator
			function createMindmapD3(container, code) {
				const svg = d3.select(container)
					.append('svg')
					.attr('width', 600)
					.attr('height', 400)
					.style('background', 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)')
					.style('border-radius', '8px');
				
				// Central node
				const centerX = 300, centerY = 200;
				
				// Add background glow
				const defs = svg.append('defs');
				const filter = defs.append('filter').attr('id', 'glow');
				filter.append('feGaussianBlur').attr('stdDeviation', '3').attr('result', 'coloredBlur');
				const feMerge = filter.append('feMerge');
				feMerge.append('feMergeNode').attr('in', 'coloredBlur');
				feMerge.append('feMergeNode').attr('in', 'SourceGraphic');
				
				// Central node
				svg.append('circle')
					.attr('cx', centerX)
					.attr('cy', centerY)
					.attr('r', 60)
					.attr('fill', '#ff6b6b')
					.attr('stroke', 'white')
					.attr('stroke-width', 4)
					.style('filter', 'url(#glow)')
					.style('cursor', 'pointer')
					.on('mouseover', function() {
						d3.select(this).transition().attr('r', 65);
					})
					.on('mouseout', function() {
						d3.select(this).transition().attr('r', 60);
					});
				
				svg.append('text')
					.attr('x', centerX)
					.attr('y', centerY - 5)
					.attr('text-anchor', 'middle')
					.text('Clean Code')
					.style('font-size', '16px')
					.style('font-weight', 'bold')
					.attr('fill', 'white')
					.style('text-shadow', '1px 1px 2px rgba(0,0,0,0.5)');
				
				svg.append('text')
					.attr('x', centerX)
					.attr('y', centerY + 10)
					.attr('text-anchor', 'middle')
					.text('Principles')
					.style('font-size', '14px')
					.attr('fill', 'white')
					.style('text-shadow', '1px 1px 2px rgba(0,0,0,0.5)');
				
				// Branch nodes with beautiful colors
				const branches = [
					{name: 'DRY', color: '#4ecdc4', desc: 'Don\'t Repeat'},
					{name: 'KISS', color: '#45b7d1', desc: 'Keep Simple'},
					{name: 'YAGNI', color: '#96ceb4', desc: 'You Aren\'t'},
					{name: 'SOLID', color: '#feca57', desc: 'Design Rules'}
				];
				
				branches.forEach((branch, i) => {
					const angle = (i * 2 * Math.PI) / branches.length;
					const x = centerX + 140 * Math.cos(angle);
					const y = centerY + 140 * Math.sin(angle);
					
					// Connection line with animation
					svg.append('line')
						.attr('x1', centerX)
						.attr('y1', centerY)
						.attr('x2', centerX)
						.attr('y2', centerY)
						.attr('stroke', 'white')
						.attr('stroke-width', 3)
						.style('opacity', 0.8)
						.transition()
						.delay(i * 200)
						.duration(800)
						.attr('x2', x)
						.attr('y2', y);
					
					// Branch circle
					svg.append('circle')
						.attr('cx', x)
						.attr('cy', y)
						.attr('r', 0)
						.attr('fill', branch.color)
						.attr('stroke', 'white')
						.attr('stroke-width', 3)
						.style('filter', 'url(#glow)')
						.style('cursor', 'pointer')
						.transition()
						.delay(i * 200 + 400)
						.duration(600)
						.attr('r', 45)
						.on('end', function() {
							d3.select(this)
								.on('mouseover', function() {
									d3.select(this).transition().attr('r', 50);
								})
								.on('mouseout', function() {
									d3.select(this).transition().attr('r', 45);
								});
						});
					
					// Branch text
					setTimeout(() => {
						svg.append('text')
							.attr('x', x)
							.attr('y', y - 5)
							.attr('text-anchor', 'middle')
							.text(branch.name)
							.style('font-size', '14px')
							.style('font-weight', 'bold')
							.attr('fill', 'white')
							.style('text-shadow', '1px 1px 2px rgba(0,0,0,0.5)')
							.style('opacity', 0)
							.transition()
							.style('opacity', 1);
						
						svg.append('text')
							.attr('x', x)
							.attr('y', y + 10)
							.attr('text-anchor', 'middle')
							.text(branch.desc)
							.style('font-size', '10px')
							.attr('fill', 'white')
							.style('text-shadow', '1px 1px 2px rgba(0,0,0,0.5)')
							.style('opacity', 0)
							.transition()
							.delay(200)
							.style('opacity', 0.9);
					}, i * 200 + 1000);
				});
				
				// Add title
				svg.append('text')
					.attr('x', 300)
					.attr('y', 30)
					.attr('text-anchor', 'middle')
					.style('font-size', '18px')
					.style('font-weight', 'bold')
					.attr('fill', 'white')
					.style('text-shadow', '2px 2px 4px rgba(0,0,0,0.5)')
					.text('🧠 Interactive Mind Map');
			}
			
			// 📊 Beautiful D3.js Gantt Creator
			function createGanttD3(container, code) {
				const svg = d3.select(container)
					.append('svg')
					.attr('width', 600)
					.attr('height', 350)
					.style('background', 'white')
					.style('border-radius', '8px')
					.style('box-shadow', '0 4px 6px rgba(0, 0, 0, 0.1)');
				
				// Sample data with beautiful colors
				const tasks = [
					{name: 'Research Skills', start: 0, duration: 2, color: '#667eea'},
					{name: 'Python Basics', start: 2, duration: 4, color: '#764ba2'},
					{name: 'Database & SQL', start: 5, duration: 3, color: '#f093fb'},
					{name: 'Coding Standards', start: 7, duration: 3, color: '#4ecdc4'},
					{name: 'AI Mathematics', start: 9, duration: 4, color: '#45b7d1'}
				];
				
				const margin = {top: 60, right: 50, bottom: 50, left: 150};
				const width = 600 - margin.left - margin.right;
				const height = 350 - margin.top - margin.bottom;
				
				const xScale = d3.scaleLinear().domain([0, 13]).range([0, width]);
				const yScale = d3.scaleBand().domain(tasks.map(d => d.name)).range([0, height]).padding(0.2);
				
				const g = svg.append('g').attr('transform', `translate(${margin.left}, ${margin.top})`);
				
				// Add grid lines
				g.append('g')
					.selectAll('.grid-line')
					.data(xScale.ticks(13))
					.enter().append('line')
					.attr('class', 'grid-line')
					.attr('x1', d => xScale(d))
					.attr('x2', d => xScale(d))
					.attr('y1', 0)
					.attr('y2', height)
					.attr('stroke', '#e2e8f0')
					.attr('stroke-width', 1);
				
				// Create bars with animation
				g.selectAll('.task-bar')
					.data(tasks)
					.enter().append('rect')
					.attr('class', 'task-bar')
					.attr('x', d => xScale(d.start))
					.attr('y', d => yScale(d.name))
					.attr('width', 0)
					.attr('height', yScale.bandwidth())
					.attr('fill', d => d.color)
					.attr('stroke', '#2d3748')
					.attr('stroke-width', 1)
					.attr('rx', 4)
					.style('filter', 'drop-shadow(2px 2px 4px rgba(0,0,0,0.1))')
					.transition()
					.delay((d, i) => i * 200)
					.duration(800)
					.attr('width', d => xScale(d.duration));
				
				// Add task labels
				g.selectAll('.task-label')
					.data(tasks)
					.enter().append('text')
					.attr('class', 'task-label')
					.attr('x', -10)
					.attr('y', d => yScale(d.name) + yScale.bandwidth()/2)
					.attr('dy', '0.35em')
					.attr('text-anchor', 'end')
					.text(d => d.name)
					.style('font-size', '12px')
					.style('font-weight', '500')
					.attr('fill', '#2d3748')
					.style('opacity', 0)
					.transition()
					.delay((d, i) => i * 200 + 400)
					.style('opacity', 1);
				
				// Add x-axis
				g.append('g')
					.attr('transform', `translate(0, ${height})`)
					.call(d3.axisBottom(xScale).ticks(13))
					.selectAll('text')
					.style('font-size', '11px')
					.attr('fill', '#4a5568');
				
				// Add title
				svg.append('text')
					.attr('x', 300)
					.attr('y', 30)
					.attr('text-anchor', 'middle')
					.style('font-size', '18px')
					.style('font-weight', 'bold')
					.attr('fill', '#2d3748')
					.text('📅 Week 1 Learning Timeline');
				
				// Add subtitle
				svg.append('text')
					.attr('x', 300)
					.attr('y', 50)
					.attr('text-anchor', 'middle')
					.style('font-size', '12px')
					.attr('fill', '#718096')
					.text('Interactive D3.js Gantt Chart');
			}
			
			// 🎨 Generic beautiful placeholder
			function createGenericD3(container, code) {
				container.innerHTML = `
					<div style="text-align: center; padding: 50px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border-radius: 12px; box-shadow: 0 8px 25px rgba(0,0,0,0.15);">
						<div style="font-size: 3em; margin-bottom: 15px;">✨</div>
						<h3 style="margin: 0 0 15px 0; font-size: 24px; font-weight: bold;">D3.js Powered Visualization</h3>
						<p style="margin: 0 0 10px 0; opacity: 0.9; font-size: 16px;">Interactive diagram ready!</p>
						<small style="opacity: 0.8; font-size: 14px;">🎉 No more Mermaid parsing nightmares!</small>
						<div style="margin-top: 20px; padding: 15px; background: rgba(255,255,255,0.1); border-radius: 8px; font-family: monospace; font-size: 12px; text-align: left; max-height: 100px; overflow: hidden;">
							${code.substring(0, 200)}${code.length > 200 ? '...' : ''}
						</div>
					</div>
				`;
			}
			
			// Helper functions - improved parsing for better results
			function extractNodes(code) {
				
				// Try multiple patterns for node extraction
				const nodePattern1 = /([A-Z])\[([^\]]+)\]/g;  // A[Label]
				const nodePattern2 = /([A-Z])\(([^)]+)\)/g;   // A(Label)
				const nodePattern3 = /([A-Z])\{([^}]+)\}/g;   // A{Label}
				
				const nodes = [];
				let match;
				
				// Extract from pattern A[Label]
				while ((match = nodePattern1.exec(code)) !== null) {
					nodes.push({id: match[1], label: match[2]});
				}
				
				// Extract from pattern A(Label)
				code = code.replace(/([A-Z])\[([^\]]+)\]/g, ''); // Remove already found
				while ((match = nodePattern2.exec(code)) !== null) {
					nodes.push({id: match[1], label: match[2]});
				}
				

				
				// Smart fallback based on content type
				if (nodes.length === 0) {
					if (code.toLowerCase().includes('sql') || code.toLowerCase().includes('select')) {
						return [
							{id: 'A', label: 'SELECT Statement'},
							{id: 'B', label: 'Choose Columns'},
							{id: 'C', label: 'FROM Table'},
							{id: 'D', label: 'WHERE Conditions'},
							{id: 'E', label: 'ORDER BY'},
							{id: 'F', label: 'LIMIT Results'}
						];
					} else if (code.toLowerCase().includes('python') || code.toLowerCase().includes('loop')) {
						return [
							{id: 'A', label: 'Start Loop'},
							{id: 'B', label: 'Condition Check'},
							{id: 'C', label: 'Execute Body'},
							{id: 'D', label: 'Update Counter'},
							{id: 'E', label: 'End Loop'}
						];
					} else {
						return [
							{id: 'A', label: 'Start'},
							{id: 'B', label: 'Process'},
							{id: 'C', label: 'Decision'},
							{id: 'D', label: 'End'}
						];
					}
				}
				
				return nodes;
			}
			
			function extractLinks(code) {
				
				const linkPattern = /([A-Z])\s*-->\s*([A-Z])/g;
				const links = [];
				let match;
				
				while ((match = linkPattern.exec(code)) !== null) {
					links.push({source: match[1], target: match[2]});
				}
				

				
				// Smart fallback based on available nodes
				if (links.length === 0) {
					// Create logical flow between sequential nodes
					const nodeIds = ['A', 'B', 'C', 'D', 'E', 'F'];
					const availableNodes = nodeIds.slice(0, Math.min(6, nodeIds.length));
					
					for (let i = 0; i < availableNodes.length - 1; i++) {
						links.push({source: availableNodes[i], target: availableNodes[i + 1]});
					}
				}
				
				return links;
			}
			
			// Enhanced KaTeX initialization (unchanged - it works perfectly)
			function initKaTeX() {
				if (typeof renderMathInElement !== 'undefined') {
					try {
					renderMathInElement(document.body, {
						delimiters: [
							{left: "$$", right: "$$", display: true},
							{left: "$", right: "$", display: false},
							{left: "\\[", right: "\\]", display: true},
							{left: "\\(", right: "\\)", display: false}
						],
							throwOnError: false,
							strict: false
						});

					} catch (error) {
						console.error('❌ KaTeX error:', error);
					}
				}
			}
			
			// Initialize when DOM is ready
			if (document.readyState === 'loading') {
				document.addEventListener('DOMContentLoaded', initD3Diagrams);
			} else {
				initD3Diagrams();
			}
			
			// Handle Astro page navigation
			document.addEventListener('astro:page-load', initD3Diagrams);
		</script>
	</body>
</html>

<style is:global define:vars={{
	bannerOffset,
	'banner-height-home': `${BANNER_HEIGHT_HOME}vh`,
	'banner-height': `${BANNER_HEIGHT}vh`,
}}>
@tailwind components;
@layer components {
	.enable-banner.is-home #banner-wrapper {
		@apply h-[var(--banner-height-home)] translate-y-[var(--banner-height-extend)]
	}
	.enable-banner #banner-wrapper {
		@apply h-[var(--banner-height-home)]
	}

	.enable-banner.is-home #banner {
		@apply h-[var(--banner-height-home)] translate-y-0
	}
	.enable-banner #banner {
		@apply h-[var(--banner-height-home)] translate-y-[var(--bannerOffset)]
	}
	.enable-banner.is-home #main-grid {
		@apply translate-y-[var(--banner-height-extend)];
	}
	.enable-banner #top-row {
		@apply h-[calc(var(--banner-height-home)_-_4.5rem)] transition-all duration-300
	}
	.enable-banner.is-home #sidebar-sticky {
		@apply top-[calc(1rem_-_var(--banner-height-extend))]
	}
	.navbar-hidden {
		@apply opacity-0 -translate-y-16
	}
	
	/* Mermaid diagram styles */
	.mermaid {
		@apply flex justify-center my-8;
	}
	
	.mermaid svg {
		@apply max-w-full h-auto;
	}
}
</style>

<script>
import 'overlayscrollbars/overlayscrollbars.css';
import {
	OverlayScrollbars,
	// ScrollbarsHidingPlugin,
	// SizeObserverPlugin,
	// ClickScrollPlugin
} from 'overlayscrollbars';
import {getHue, getStoredTheme, setHue, setTheme} from "../utils/setting-utils";
import {pathsEqual, url} from "../utils/url-utils";
import {
	BANNER_HEIGHT,
	BANNER_HEIGHT_HOME,
	BANNER_HEIGHT_EXTEND,
	MAIN_PANEL_OVERLAPS_BANNER_HEIGHT
} from "../constants/constants";
import { siteConfig } from '../config';

/* Preload fonts */
// (async function() {
// 	try {
// 		await Promise.all([
// 			document.fonts.load("400 1em Roboto"),
// 			document.fonts.load("700 1em Roboto"),
// 		]);
// 		document.body.classList.remove("hidden");
// 	} catch (error) {
// 		console.log("Failed to load fonts:", error);
// 	}
// })();

/* TODO This is a temporary solution for style flicker issue when the transition is activated */
/* issue link: https://github.com/withastro/astro/issues/8711, the solution get from here too */
/* update: fixed in Astro 3.2.4 */
/*
function disableAnimation() {
	const css = document.createElement('style')
	css.appendChild(
		document.createTextNode(
			`*{
              -webkit-transition:none!important;
              -moz-transition:none!important;
              -o-transition:none!important;
              -ms-transition:none!important;
              transition:none!important
              }`
		)
	)
	document.head.appendChild(css)

	return () => {
		// Force restyle
		;(() => window.getComputedStyle(document.body))()

		// Wait for next tick before removing
		setTimeout(() => {
			document.head.removeChild(css)
		}, 1)
	}
}
*/

const bannerEnabled = !!document.getElementById('banner-wrapper')

function setClickOutsideToClose(panel: string, ignores: string[]) {
	document.addEventListener("click", event => {
		let panelDom = document.getElementById(panel);
		let tDom = event.target;
		if (!(tDom instanceof Node)) return;		// Ensure the event target is an HTML Node
		for (let ig of ignores) {
			let ie = document.getElementById(ig)
			if (ie == tDom || (ie?.contains(tDom))) {
				return;
			}
		}
		panelDom!.classList.add("float-panel-closed");
	});
}
setClickOutsideToClose("display-setting", ["display-setting", "display-settings-switch"])
setClickOutsideToClose("nav-menu-panel", ["nav-menu-panel", "nav-menu-switch"])
setClickOutsideToClose("search-panel", ["search-panel", "search-bar", "search-switch"])


function loadTheme() {
	const theme = getStoredTheme()
	setTheme(theme)
}

function loadHue() {
	setHue(getHue())
}

function initCustomScrollbar() {
	const bodyElement = document.querySelector('body');
	if (!bodyElement) return;
	OverlayScrollbars(
		// docs say that a initialization to the body element would affect native functionality like window.scrollTo
		// but just leave it here for now
		{
			target: bodyElement,
			cancel: {
				nativeScrollbarsOverlaid: true,    // don't initialize the overlay scrollbar if there is a native one
			}
		}, {
		scrollbars: {
			theme: 'scrollbar-base scrollbar-auto py-1',
			autoHide: 'move',
			autoHideDelay: 500,
			autoHideSuspend: false,
		},
	});

	const katexElements = document.querySelectorAll('.katex-display') as NodeListOf<HTMLElement>;

	const katexObserverOptions = {
		root: null,
		rootMargin: '100px',
		threshold: 0.1
	};

	const processKatexElement = (element: HTMLElement) => {
		if (!element.parentNode) return;
		if (element.hasAttribute('data-scrollbar-initialized')) return;

		const container = document.createElement('div');
		container.className = 'katex-display-container';
		container.setAttribute('aria-label', 'scrollable container for formulas');

		element.parentNode.insertBefore(container, element);
		container.appendChild(element);

		OverlayScrollbars(container, {
			scrollbars: {
				theme: 'scrollbar-base scrollbar-auto',
				autoHide: 'leave',
				autoHideDelay: 500,
				autoHideSuspend: false
			}
		});

		element.setAttribute('data-scrollbar-initialized', 'true');
	};

	const katexObserver = new IntersectionObserver((entries, observer) => {
		entries.forEach(entry => {
			if (entry.isIntersecting) {
			processKatexElement(entry.target as HTMLElement);
			observer.unobserve(entry.target);
			}
		});
	}, katexObserverOptions);

	katexElements.forEach(element => {
		katexObserver.observe(element);
	});
}

function showBanner() {
	if (!siteConfig.banner.enable) return;

	const banner = document.getElementById('banner');
	if (!banner) {
		console.error('Banner element not found');
		return;
	}

	banner.classList.remove('opacity-0', 'scale-105');
}

function init() {
	// disableAnimation()()		// TODO
	loadTheme();
	loadHue();
	initCustomScrollbar();
	showBanner();
}

/* Load settings when entering the site */
init();

const setup = () => {
	// TODO: temp solution to change the height of the banner
/*
	window.swup.hooks.on('animation:out:start', () => {
		const path = window.location.pathname
		const body = document.querySelector('body')
		if (path[path.length - 1] === '/' && !body.classList.contains('is-home')) {
			body.classList.add('is-home')
		} else if (path[path.length - 1] !== '/' && body.classList.contains('is-home')) {
			body.classList.remove('is-home')
		}
	})
*/
	window.swup.hooks.on('link:click', () => {
		// Remove the delay for the first time page load
		document.documentElement.style.setProperty('--content-delay', '0ms')

		// prevent elements from overlapping the navbar
		if (!bannerEnabled) {
			return
		}
		let threshold = window.innerHeight * (BANNER_HEIGHT / 100) - 72 - 16
		let navbar = document.getElementById('navbar-wrapper')
		if (!navbar || !document.body.classList.contains('lg:is-home')) {
			return
		}
		if (document.body.scrollTop >= threshold || document.documentElement.scrollTop >= threshold) {
			navbar.classList.add('navbar-hidden')
		}
	})
	window.swup.hooks.on('content:replace', initCustomScrollbar)
	window.swup.hooks.on('visit:start', (visit: {to: {url: string}}) => {
		// change banner height immediately when a link is clicked
		const bodyElement = document.querySelector('body')
		if (pathsEqual(visit.to.url, url('/'))) {
			bodyElement!.classList.add('lg:is-home');
		} else {
			bodyElement!.classList.remove('lg:is-home');
		}

		// increase the page height during page transition to prevent the scrolling animation from jumping
		const heightExtend = document.getElementById('page-height-extend')
		if (heightExtend) {
			heightExtend.classList.remove('hidden')
		}

		// Hide the TOC while scrolling back to top
		let toc = document.getElementById('toc-wrapper');
		if (toc) {
			toc.classList.add('toc-not-ready')
		}
	});
	window.swup.hooks.on('page:view', () => {
		// hide the temp high element when the transition is done
		const heightExtend = document.getElementById('page-height-extend')
		if (heightExtend) {
			heightExtend.classList.remove('hidden')
		}
	});
	window.swup.hooks.on('visit:end', (_visit: {to: {url: string}}) => {
		setTimeout(() => {
			const heightExtend = document.getElementById('page-height-extend')
			if (heightExtend) {
				heightExtend.classList.add('hidden')
			}

            // Just make the transition looks better
            const toc = document.getElementById('toc-wrapper');
            if (toc) {
                toc.classList.remove('toc-not-ready')
            }
        }, 200)
	});
}
if (window?.swup?.hooks) {
	setup()
} else {
	document.addEventListener('swup:enable', setup)
}

let backToTopBtn = document.getElementById('back-to-top-btn');
let toc = document.getElementById('toc-wrapper');
let navbar = document.getElementById('navbar-wrapper')
function scrollFunction() {
	let bannerHeight = window.innerHeight * (BANNER_HEIGHT / 100)

	if (backToTopBtn) {
		if (document.body.scrollTop > bannerHeight || document.documentElement.scrollTop > bannerHeight) {
			backToTopBtn.classList.remove('hide')
		} else {
			backToTopBtn.classList.add('hide')
		}
	}

	if (bannerEnabled && toc) {
		if (document.body.scrollTop > bannerHeight || document.documentElement.scrollTop > bannerHeight) {
			toc.classList.remove('toc-hide')
		} else {
			toc.classList.add('toc-hide')
		}
	}

	if (!bannerEnabled) return
	if (navbar) {
		const NAVBAR_HEIGHT = 72
		const MAIN_PANEL_EXCESS_HEIGHT = MAIN_PANEL_OVERLAPS_BANNER_HEIGHT * 16			// The height the main panel overlaps the banner

		let bannerHeight = BANNER_HEIGHT
		if (document.body.classList.contains('lg:is-home') && window.innerWidth >= 1024) {
			bannerHeight = BANNER_HEIGHT_HOME
		}
		let threshold = window.innerHeight * (bannerHeight / 100) - NAVBAR_HEIGHT - MAIN_PANEL_EXCESS_HEIGHT - 16
		if (document.body.scrollTop >= threshold || document.documentElement.scrollTop >= threshold) {
			navbar.classList.add('navbar-hidden')
		} else {
			navbar.classList.remove('navbar-hidden')
		}
	}
}
window.onscroll = scrollFunction

window.onresize = () => {
	// calculate the --banner-height-extend, which needs to be a multiple of 4 to avoid blurry text
	let offset = Math.floor(window.innerHeight * (BANNER_HEIGHT_EXTEND / 100));
	offset = offset - offset % 4;
	document.documentElement.style.setProperty('--banner-height-extend', `${offset}px`);
}

</script>

<script>
import PhotoSwipeLightbox from "photoswipe/lightbox";
import "photoswipe/style.css"

let lightbox: PhotoSwipeLightbox
let pswp = import("photoswipe")

function createPhotoSwipe() {
	lightbox = new PhotoSwipeLightbox({
		gallery: ".custom-md img, #post-cover img",
		pswpModule: () => pswp,
		closeSVG: '<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#ffffff"><path d="M480-424 284-228q-11 11-28 11t-28-11q-11-11-11-28t11-28l196-196-196-196q-11-11-11-28t11-28q11-11 28-11t28 11l196 196 196-196q11-11 28-11t28 11q11 11 11 28t-11 28L536-480l196 196q11 11 11 28t-11 28q-11 11-28 11t-28-11L480-424Z"/></svg>',
		zoomSVG: '<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#ffffff"><path d="M340-540h-40q-17 0-28.5-11.5T260-580q0-17 11.5-28.5T300-620h40v-40q0-17 11.5-28.5T380-700q17 0 28.5 11.5T420-660v40h40q17 0 28.5 11.5T500-580q0 17-11.5 28.5T460-540h-40v40q0 17-11.5 28.5T380-460q-17 0-28.5-11.5T340-500v-40Zm40 220q-109 0-184.5-75.5T120-580q0-109 75.5-184.5T380-840q109 0 184.5 75.5T640-580q0 44-14 83t-38 69l224 224q11 11 11 28t-11 28q-11 11-28 11t-28-11L532-372q-30 24-69 38t-83 14Zm0-80q75 0 127.5-52.5T560-580q0-75-52.5-127.5T380-760q-75 0-127.5 52.5T200-580q0 75 52.5 127.5T380-400Z"/></svg>',
		padding: { top: 20, bottom: 20, left: 20, right: 20 },
		wheelToZoom: true,
		arrowPrev: false,
		arrowNext: false,
		imageClickAction: 'close',
		tapAction: 'close',
		doubleTapAction: 'zoom',
	})

	lightbox.addFilter("domItemData", (itemData, element) => {
		if (element instanceof HTMLImageElement) {
			itemData.src = element.src

			itemData.w = Number(element.naturalWidth || window.innerWidth)
			itemData.h = Number(element.naturalHeight || window.innerHeight)

			itemData.msrc = element.src
		}

		return itemData
	})

	lightbox.init()
}

const setup = () => {
	if (!lightbox) {
		createPhotoSwipe()
	}
	window.swup.hooks.on("page:view", () => {
		createPhotoSwipe()
	})

	window.swup.hooks.on(
		"content:replace",
		() => {
			lightbox?.destroy?.()
		},
		{ before: true },
	)
}

if (window.swup) {
	setup()
} else {
	document.addEventListener("swup:enable", setup)
}
</script>
